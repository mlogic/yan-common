#-*- Mode: shell-script -*-
# Yan's personal bash.rc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# source this file for ONCE only
if [[ -n "${YAN_BASHRC_SOURCED:-}" ]]; then
    return 0
fi
YAN_BASHRC_SOURCED=Y

# Get our own location.  "${BASH_SOURCE}" can be a symlink, so we
# first get its real dir location, then find it's parent dir.
YAN_COMMON="$(realpath "$(dirname "$(realpath "${BASH_SOURCE}")")/..")"
export YAN_COMMON

# HISTORY SETTINGS
##################
# don't put duplicate lines or lines starting with space in the history.
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# Correct spelling mistakes when using 'cd'
shopt -s cdspell
# Do not attempt completion on an empty line
shopt -s no_empty_cmd_completion

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# for less case-insensitive searching and colorful display
export LESS="${LESS:-} -i -R"

# Elliot's fancy PS1 that displays RC if it's not 0:
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color|xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

__sync_command_history() {
  # Save all unsaved history so it can be picked up by other shell sessions
  history -a
  # Read history that might have been modified by other shell sessions
  history -r
}

__prompt_command() {
  local EXIT="$?"             # This needs to be first to grab the RC from last command
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'
  # For reference:
  local RCol='\[\e[0m\]'
  local Red='\[\e[0;31m\]'
  # local Gre='\[\e[0;32m\]'
  # local BYel='\[\e[1;33m\]'
  # local BBlu='\[\e[1;34m\]'
  # local Pur='\[\e[0;35m\]'

  if [ $EXIT != 0 ]; then
    PS1+=" ${Red}(${EXIT})${RCol}"      # Add red if exit code non 0
  fi

  PS1+="\$ "
  __sync_command_history
}

if [ "$color_prompt" = yes ]; then
  PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
  PROMPT_COMMAND=__sync_command_history
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias tailf='tail -f'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

[ -d /opt/bin/ ] && PATH="${PATH}:/opt/bin"
PATH="${PATH}:${YAN_COMMON}:${YAN_COMMON}/os:${YAN_COMMON}/shell"
[ -d ~/config/bin ] && PATH="${PATH}:"~/config/bin
[ -d ~/bin ] && PATH="${PATH}:"~/bin
export PATH

export ANSIBLE_ROLES_PATH="${ANSIBLE_ROLES_PATH}:/etc/ansible/roles:"~/.ansible/roles:"${YAN_COMMON}/roles"

# We always want best compression for xz
export XZ_OPT=-9

[ -f ~/config/etc/bashrc ] && . ~/config/etc/bashrc
